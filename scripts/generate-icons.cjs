const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
const ICONS_DIR = './src/icons';
const OUTPUT_FILE = './src/icons/index.ts';

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –Ω–∞–∑–≤–∏ —Ñ–∞–π–ª—É –≤ camelCase
function toCamelCase(str) {
  return str
    .replace(/Icon\.vue$/, '') // –í–∏–¥–∞–ª—è—î–º–æ Icon.vue
    .replace(/[_-](.)/g, (_, char) => char.toUpperCase()) // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ camelCase
    .replace(/^(.)/, (_, char) => char.toLowerCase()); // –ü–µ—Ä—à–∞ –ª—ñ—Ç–µ—Ä–∞ –º–∞–ª–µ–Ω—å–∫–∞
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –Ω–∞–∑–≤–∏ —Ñ–∞–π–ª—É –≤ PascalCase –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É
function toPascalCase(str) {
  return str.replace(/\.vue$/, ''); // –ü—Ä–æ—Å—Ç–æ –≤–∏–¥–∞–ª—è—î–º–æ .vue, –∑–∞–ª–∏—à–∞—î–º–æ —è–∫ —î
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –æ–±—Ö–æ–¥—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
function getAllIconFiles(dir, baseDir = dir) {
  const files = [];
  const items = fs.readdirSync(dir);

  for (const item of items) {
    const fullPath = path.join(dir, item);
    const stat = fs.statSync(fullPath);

    if (stat.isDirectory()) {
      files.push(...getAllIconFiles(fullPath, baseDir));
    } else if (item.endsWith('Icon.vue')) {
      const relativePath = path.relative(baseDir, fullPath);
      files.push({
        fileName: item,
        relativePath: relativePath.replace(/\\/g, '/'), // –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ —à–ª—è—Ö –¥–ª—è Windows
        directory: path.relative(baseDir, dir).replace(/\\/g, '/'),
      });
    }
  }

  return files;
}

// –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
function generateIconsIndex() {
  try {
    console.log('üîç –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó icons...');

    const iconFiles = getAllIconFiles(ICONS_DIR);

    if (iconFiles.length === 0) {
      console.log('‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É –∑ —ñ–∫–æ–Ω–∫–∞–º–∏');
      return;
    }

    console.log(`üì¶ –ó–Ω–∞–π–¥–µ–Ω–æ ${iconFiles.length} —ñ–∫–æ–Ω–æ–∫`);

    // –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –∑–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è–º–∏
    const groupedIcons = {};
    iconFiles.forEach(icon => {
      const dir = icon.directory || 'root';
      if (!groupedIcons[dir]) {
        groupedIcons[dir] = [];
      }
      groupedIcons[dir].push(icon);
    });

    // –ì–µ–Ω–µ—Ä—É–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—ñ–≤
    const imports = [];
    const exports = [];

    Object.keys(groupedIcons)
      .sort()
      .forEach(dir => {
        const dirComment = dir === 'root' ? 'root icons' : `${dir} icons`;

        groupedIcons[dir].forEach(icon => {
          const componentName = toPascalCase(icon.fileName);
          const exportName = toCamelCase(icon.fileName);
          const importPath = `./${icon.relativePath}`;

          imports.push(`import ${componentName} from '${importPath}';`);

          if (!exports.find(group => group.comment === dirComment)) {
            exports.push({ comment: dirComment, icons: [] });
          }

          const group = exports.find(group => group.comment === dirComment);
          group.icons.push(`  ${exportName}: ${componentName},`);
        });
      });

    // –ì–µ–Ω–µ—Ä—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É —Ñ–∞–π–ª—É
    const fileContent = [
      '// –¶–µ–π —Ñ–∞–π–ª –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ. –ù–µ —Ä–µ–¥–∞–≥—É–π—Ç–µ –≤—Ä—É—á–Ω—É!',
      '// –î–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ø—É—Å—Ç—ñ—Ç—å: node scripts/generate-icons.js',
      '',
      ...imports,
      '',
      'export const icons = {',
      ...exports
        .map(group => [`  // ${group.comment}`, ...group.icons, ''])
        .flat()
        .slice(0, -1), // –í–∏–¥–∞–ª—è—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫
      '} as const;',
      '',
      'export type IconName = keyof typeof icons;',
      '',
    ].join('\n');

    // –ó–∞–ø–∏—Å—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É
    fs.writeFileSync(OUTPUT_FILE, fileContent, 'utf8');

    console.log(`‚úÖ –§–∞–π–ª ${OUTPUT_FILE} —É—Å–ø—ñ—à–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ!`);
    console.log(`üìä –î–æ–¥–∞–Ω–æ ${iconFiles.length} —ñ–∫–æ–Ω–æ–∫ –∑ ${Object.keys(groupedIcons).length} –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π`);

    // –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è—Ö
    Object.keys(groupedIcons)
      .sort()
      .forEach(dir => {
        console.log(`   - ${dir}: ${groupedIcons[dir].length} —ñ–∫–æ–Ω–æ–∫`);
      });
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä—É–≤–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç—É
generateIconsIndex();
